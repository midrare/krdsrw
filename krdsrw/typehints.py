# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT
# MODIFY. ALL CHANGES WILL BE UNDONE.

# NOLINTBEGIN
# @formatter:off
import typing

from .types import *
from .containers import *
from .containers import RestrictedDict

class _SchemaDict(RestrictedDict[str, typing.Any]):



    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['dictionary'],  # type: ignore
    ) -> Utf8Str:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['dictionary'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['dictionary'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['dictionary'],  # type: ignore
        item: Utf8Str,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['dictionary'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ) -> None | Utf8Str:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['dictionary'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ) -> None | Utf8Str:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['dictionary'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['sync_lpr'],  # type: ignore
    ) -> Bool:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['sync_lpr'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['sync_lpr'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['sync_lpr'],  # type: ignore
        item: Bool,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['sync_lpr'],  # type: ignore
        default: None | Bool = None,  # type: ignore
    ) -> None | Bool:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['sync_lpr'],  # type: ignore
        default: None | Bool = None,  # type: ignore
    ) -> None | Bool:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['sync_lpr'],  # type: ignore
        default: None | Bool = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['dict.prefs.v2'],  # type: ignore
    ) -> DynamicMap:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['dict.prefs.v2'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['dict.prefs.v2'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['dict.prefs.v2'],  # type: ignore
        item: DynamicMap,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['dict.prefs.v2'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ) -> None | DynamicMap:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['dict.prefs.v2'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ) -> None | DynamicMap:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['dict.prefs.v2'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['EndActions'],  # type: ignore
    ) -> DynamicMap:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['EndActions'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['EndActions'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['EndActions'],  # type: ignore
        item: DynamicMap,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['EndActions'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ) -> None | DynamicMap:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['EndActions'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ) -> None | DynamicMap:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['EndActions'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['ReaderMetrics'],  # type: ignore
    ) -> DynamicMap:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['ReaderMetrics'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['ReaderMetrics'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['ReaderMetrics'],  # type: ignore
        item: DynamicMap,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['ReaderMetrics'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ) -> None | DynamicMap:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['ReaderMetrics'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ) -> None | DynamicMap:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['ReaderMetrics'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['StartActions'],  # type: ignore
    ) -> DynamicMap:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['StartActions'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['StartActions'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['StartActions'],  # type: ignore
        item: DynamicMap,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['StartActions'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ) -> None | DynamicMap:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['StartActions'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ) -> None | DynamicMap:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['StartActions'],  # type: ignore
        default: None | DynamicMap = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['Translator'],  # type: ignore
    ) -> Utf8Str:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['Translator'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['Translator'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['Translator'],  # type: ignore
        item: Utf8Str,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['Translator'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ) -> None | Utf8Str:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['Translator'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ) -> None | Utf8Str:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['Translator'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['Wikipedia'],  # type: ignore
    ) -> Utf8Str:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['Wikipedia'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['Wikipedia'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['Wikipedia'],  # type: ignore
        item: Utf8Str,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['Wikipedia'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ) -> None | Utf8Str:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['Wikipedia'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ) -> None | Utf8Str:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['Wikipedia'],  # type: ignore
        default: None | Utf8Str = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['buy.asin.response.data'],  # type: ignore
    ) -> Json:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['buy.asin.response.data'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['buy.asin.response.data'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['buy.asin.response.data'],  # type: ignore
        item: Json,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['buy.asin.response.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ) -> None | Json:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['buy.asin.response.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ) -> None | Json:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['buy.asin.response.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['next.in.series.info.data'],  # type: ignore
    ) -> Json:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['next.in.series.info.data'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['next.in.series.info.data'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['next.in.series.info.data'],  # type: ignore
        item: Json,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['next.in.series.info.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ) -> None | Json:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['next.in.series.info.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ) -> None | Json:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['next.in.series.info.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['price.info.data'],  # type: ignore
    ) -> Json:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['price.info.data'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['price.info.data'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['price.info.data'],  # type: ignore
        item: Json,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['price.info.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ) -> None | Json:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['price.info.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ) -> None | Json:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['price.info.data'],  # type: ignore
        default: None | Json = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['erl'],  # type: ignore
    ) -> Position:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['erl'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['erl'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['erl'],  # type: ignore
        item: Position,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['erl'],  # type: ignore
        default: None | Position = None,  # type: ignore
    ) -> None | Position:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['erl'],  # type: ignore
        default: None | Position = None,  # type: ignore
    ) -> None | Position:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['erl'],  # type: ignore
        default: None | Position = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['lpr'],  # type: ignore
    ) -> LastPageRead:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['lpr'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['lpr'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['lpr'],  # type: ignore
        item: LastPageRead,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['lpr'],  # type: ignore
        default: None | LastPageRead = None,  # type: ignore
    ) -> None | LastPageRead:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['lpr'],  # type: ignore
        default: None | LastPageRead = None,  # type: ignore
    ) -> None | LastPageRead:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['lpr'],  # type: ignore
        default: None | LastPageRead = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['fpr'],  # type: ignore
    ) -> PageReadPos:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['fpr'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['fpr'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['fpr'],  # type: ignore
        item: PageReadPos,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['fpr'],  # type: ignore
        default: None | PageReadPos = None,  # type: ignore
    ) -> None | PageReadPos:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['fpr'],  # type: ignore
        default: None | PageReadPos = None,  # type: ignore
    ) -> None | PageReadPos:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['fpr'],  # type: ignore
        default: None | PageReadPos = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['updated_lpr'],  # type: ignore
    ) -> PageReadPos:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['updated_lpr'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['updated_lpr'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['updated_lpr'],  # type: ignore
        item: PageReadPos,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['updated_lpr'],  # type: ignore
        default: None | PageReadPos = None,  # type: ignore
    ) -> None | PageReadPos:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['updated_lpr'],  # type: ignore
        default: None | PageReadPos = None,  # type: ignore
    ) -> None | PageReadPos:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['updated_lpr'],  # type: ignore
        default: None | PageReadPos = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['apnx.key'],  # type: ignore
    ) -> APNXKey:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['apnx.key'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['apnx.key'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['apnx.key'],  # type: ignore
        item: APNXKey,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['apnx.key'],  # type: ignore
        default: None | APNXKey = None,  # type: ignore
    ) -> None | APNXKey:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['apnx.key'],  # type: ignore
        default: None | APNXKey = None,  # type: ignore
    ) -> None | APNXKey:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['apnx.key'],  # type: ignore
        default: None | APNXKey = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['fixed.layout.data'],  # type: ignore
    ) -> FixedLayoutData:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['fixed.layout.data'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['fixed.layout.data'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['fixed.layout.data'],  # type: ignore
        item: FixedLayoutData,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['fixed.layout.data'],  # type: ignore
        default: None | FixedLayoutData = None,  # type: ignore
    ) -> None | FixedLayoutData:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['fixed.layout.data'],  # type: ignore
        default: None | FixedLayoutData = None,  # type: ignore
    ) -> None | FixedLayoutData:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['fixed.layout.data'],  # type: ignore
        default: None | FixedLayoutData = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['sharing.limits'],  # type: ignore
    ) -> SharingLimits:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['sharing.limits'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['sharing.limits'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['sharing.limits'],  # type: ignore
        item: SharingLimits,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['sharing.limits'],  # type: ignore
        default: None | SharingLimits = None,  # type: ignore
    ) -> None | SharingLimits:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['sharing.limits'],  # type: ignore
        default: None | SharingLimits = None,  # type: ignore
    ) -> None | SharingLimits:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['sharing.limits'],  # type: ignore
        default: None | SharingLimits = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['language.store'],  # type: ignore
    ) -> LanguageStore:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['language.store'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['language.store'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['language.store'],  # type: ignore
        item: LanguageStore,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['language.store'],  # type: ignore
        default: None | LanguageStore = None,  # type: ignore
    ) -> None | LanguageStore:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['language.store'],  # type: ignore
        default: None | LanguageStore = None,  # type: ignore
    ) -> None | LanguageStore:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['language.store'],  # type: ignore
        default: None | LanguageStore = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['periodicals.view.state'],  # type: ignore
    ) -> PeriodicalsViewState:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['periodicals.view.state'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['periodicals.view.state'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['periodicals.view.state'],  # type: ignore
        item: PeriodicalsViewState,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['periodicals.view.state'],  # type: ignore
        default: None | PeriodicalsViewState = None,  # type: ignore
    ) -> None | PeriodicalsViewState:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['periodicals.view.state'],  # type: ignore
        default: None | PeriodicalsViewState = None,  # type: ignore
    ) -> None | PeriodicalsViewState:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['periodicals.view.state'],  # type: ignore
        default: None | PeriodicalsViewState = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['purchase.state.data'],  # type: ignore
    ) -> PurchaseStateData:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['purchase.state.data'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['purchase.state.data'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['purchase.state.data'],  # type: ignore
        item: PurchaseStateData,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['purchase.state.data'],  # type: ignore
        default: None | PurchaseStateData = None,  # type: ignore
    ) -> None | PurchaseStateData:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['purchase.state.data'],  # type: ignore
        default: None | PurchaseStateData = None,  # type: ignore
    ) -> None | PurchaseStateData:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['purchase.state.data'],  # type: ignore
        default: None | PurchaseStateData = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['timer.model'],  # type: ignore
    ) -> TimerModel:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['timer.model'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['timer.model'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['timer.model'],  # type: ignore
        item: TimerModel,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['timer.model'],  # type: ignore
        default: None | TimerModel = None,  # type: ignore
    ) -> None | TimerModel:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['timer.model'],  # type: ignore
        default: None | TimerModel = None,  # type: ignore
    ) -> None | TimerModel:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['timer.model'],  # type: ignore
        default: None | TimerModel = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['timer.data.store'],  # type: ignore
    ) -> TimerDataStore:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['timer.data.store'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['timer.data.store'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['timer.data.store'],  # type: ignore
        item: TimerDataStore,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['timer.data.store'],  # type: ignore
        default: None | TimerDataStore = None,  # type: ignore
    ) -> None | TimerDataStore:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['timer.data.store'],  # type: ignore
        default: None | TimerDataStore = None,  # type: ignore
    ) -> None | TimerDataStore:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['timer.data.store'],  # type: ignore
        default: None | TimerDataStore = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['timer.data.store.v2'],  # type: ignore
    ) -> TimerDataStoreV2:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['timer.data.store.v2'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['timer.data.store.v2'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['timer.data.store.v2'],  # type: ignore
        item: TimerDataStoreV2,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['timer.data.store.v2'],  # type: ignore
        default: None | TimerDataStoreV2 = None,  # type: ignore
    ) -> None | TimerDataStoreV2:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['timer.data.store.v2'],  # type: ignore
        default: None | TimerDataStoreV2 = None,  # type: ignore
    ) -> None | TimerDataStoreV2:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['timer.data.store.v2'],  # type: ignore
        default: None | TimerDataStoreV2 = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['book.info.store'],  # type: ignore
    ) -> BookInfoStore:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['book.info.store'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['book.info.store'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['book.info.store'],  # type: ignore
        item: BookInfoStore,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['book.info.store'],  # type: ignore
        default: None | BookInfoStore = None,  # type: ignore
    ) -> None | BookInfoStore:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['book.info.store'],  # type: ignore
        default: None | BookInfoStore = None,  # type: ignore
    ) -> None | BookInfoStore:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['book.info.store'],  # type: ignore
        default: None | BookInfoStore = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['page.history.store'],  # type: ignore
    ) -> Array[PageHistoryStoreElement]:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['page.history.store'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['page.history.store'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['page.history.store'],  # type: ignore
        item: Array[PageHistoryStoreElement],  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['page.history.store'],  # type: ignore
        default: None | Array[PageHistoryStoreElement] = None,  # type: ignore
    ) -> None | Array[PageHistoryStoreElement]:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['page.history.store'],  # type: ignore
        default: None | Array[PageHistoryStoreElement] = None,  # type: ignore
    ) -> None | Array[PageHistoryStoreElement]:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['page.history.store'],  # type: ignore
        default: None | Array[PageHistoryStoreElement] = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['reader.state.preferences'],  # type: ignore
    ) -> ReaderStatePreferences:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['reader.state.preferences'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['reader.state.preferences'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['reader.state.preferences'],  # type: ignore
        item: ReaderStatePreferences,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['reader.state.preferences'],  # type: ignore
        default: None | ReaderStatePreferences = None,  # type: ignore
    ) -> None | ReaderStatePreferences:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['reader.state.preferences'],  # type: ignore
        default: None | ReaderStatePreferences = None,  # type: ignore
    ) -> None | ReaderStatePreferences:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['reader.state.preferences'],  # type: ignore
        default: None | ReaderStatePreferences = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['font.prefs'],  # type: ignore
    ) -> FontPrefs:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['font.prefs'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['font.prefs'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['font.prefs'],  # type: ignore
        item: FontPrefs,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['font.prefs'],  # type: ignore
        default: None | FontPrefs = None,  # type: ignore
    ) -> None | FontPrefs:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['font.prefs'],  # type: ignore
        default: None | FontPrefs = None,  # type: ignore
    ) -> None | FontPrefs:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['font.prefs'],  # type: ignore
        default: None | FontPrefs = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['annotation.cache.object'],  # type: ignore
    ) -> AnnotationCacheObject:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['annotation.cache.object'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['annotation.cache.object'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['annotation.cache.object'],  # type: ignore
        item: AnnotationCacheObject,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['annotation.cache.object'],  # type: ignore
        default: None | AnnotationCacheObject = None,  # type: ignore
    ) -> None | AnnotationCacheObject:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['annotation.cache.object'],  # type: ignore
        default: None | AnnotationCacheObject = None,  # type: ignore
    ) -> None | AnnotationCacheObject:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['annotation.cache.object'],  # type: ignore
        default: None | AnnotationCacheObject = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['annotation.personal.bookmark'],  # type: ignore
    ) -> AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['annotation.personal.bookmark'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['annotation.personal.bookmark'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['annotation.personal.bookmark'],  # type: ignore
        item: AnnotationPersonalElement,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['annotation.personal.bookmark'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ) -> None | AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['annotation.personal.bookmark'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ) -> None | AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['annotation.personal.bookmark'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['annotation.personal.highlight'],  # type: ignore
    ) -> AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['annotation.personal.highlight'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['annotation.personal.highlight'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['annotation.personal.highlight'],  # type: ignore
        item: AnnotationPersonalElement,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['annotation.personal.highlight'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ) -> None | AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['annotation.personal.highlight'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ) -> None | AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['annotation.personal.highlight'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['annotation.personal.note'],  # type: ignore
    ) -> AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['annotation.personal.note'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['annotation.personal.note'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['annotation.personal.note'],  # type: ignore
        item: AnnotationPersonalElement,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['annotation.personal.note'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ) -> None | AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['annotation.personal.note'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ) -> None | AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['annotation.personal.note'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['annotation.personal.clip_article'],  # type: ignore
    ) -> AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['annotation.personal.clip_article'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['annotation.personal.clip_article'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['annotation.personal.clip_article'],  # type: ignore
        item: AnnotationPersonalElement,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['annotation.personal.clip_article'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ) -> None | AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['annotation.personal.clip_article'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ) -> None | AnnotationPersonalElement:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['annotation.personal.clip_article'],  # type: ignore
        default: None | AnnotationPersonalElement = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['whisperstore.migration.status'],  # type: ignore
    ) -> WhisperstoreMigrationStatus:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['whisperstore.migration.status'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['whisperstore.migration.status'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['whisperstore.migration.status'],  # type: ignore
        item: WhisperstoreMigrationStatus,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['whisperstore.migration.status'],  # type: ignore
        default: None | WhisperstoreMigrationStatus = None,  # type: ignore
    ) -> None | WhisperstoreMigrationStatus:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['whisperstore.migration.status'],  # type: ignore
        default: None | WhisperstoreMigrationStatus = None,  # type: ignore
    ) -> None | WhisperstoreMigrationStatus:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['whisperstore.migration.status'],  # type: ignore
        default: None | WhisperstoreMigrationStatus = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['timer.average.distribution.normal'],  # type: ignore
    ) -> TimerAverageCalculatorDistributionNormal:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['timer.average.distribution.normal'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['timer.average.distribution.normal'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['timer.average.distribution.normal'],  # type: ignore
        item: TimerAverageCalculatorDistributionNormal,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['timer.average.distribution.normal'],  # type: ignore
        default: None | TimerAverageCalculatorDistributionNormal = None,  # type: ignore
    ) -> None | TimerAverageCalculatorDistributionNormal:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['timer.average.distribution.normal'],  # type: ignore
        default: None | TimerAverageCalculatorDistributionNormal = None,  # type: ignore
    ) -> None | TimerAverageCalculatorDistributionNormal:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['timer.average.distribution.normal'],  # type: ignore
        default: None | TimerAverageCalculatorDistributionNormal = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Literal['timer.average.calculator.outliers'],  # type: ignore
    ) -> TimerAverageCalculatorOutliers:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Literal['timer.average.calculator.outliers'],  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Literal['timer.average.calculator.outliers'],  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Literal['timer.average.calculator.outliers'],  # type: ignore
        item: TimerAverageCalculatorOutliers,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Literal['timer.average.calculator.outliers'],  # type: ignore
        default: None | TimerAverageCalculatorOutliers = None,  # type: ignore
    ) -> None | TimerAverageCalculatorOutliers:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Literal['timer.average.calculator.outliers'],  # type: ignore
        default: None | TimerAverageCalculatorOutliers = None,  # type: ignore
    ) -> None | TimerAverageCalculatorOutliers:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Literal['timer.average.calculator.outliers'],  # type: ignore
        default: None | TimerAverageCalculatorOutliers = None,  # type: ignore
    ):
        ...
    




    @typing.overload
    def __getitem__(
        self,
        key: typing.Any,  # type: ignore
    ) -> typing.Any:  # type: ignore
        ...

    @typing.overload
    def __contains__(
        self,
        key: typing.Any,  # type: ignore
    ) -> bool:
        ...

    @typing.overload
    def __delitem__(
        self,
        key: typing.Any,  # type: ignore
    ):
        ...

    @typing.overload
    def __setitem__(
        self,
        key: typing.Any,  # type: ignore
        item: typing.Any,  # type: ignore
    ):
        ...

    @typing.overload
    def get(
        self,
        key: typing.Any,  # type: ignore
        default: None | typing.Any = None,  # type: ignore
    ) -> None | typing.Any:  # type: ignore
        ...

    @typing.overload
    def pop(
        self,
        key: typing.Any,  # type: ignore
        default: None | typing.Any = None,  # type: ignore
    ) -> None | typing.Any:  # type: ignore
        ...

    @typing.overload
    def setdefault(
        self,
        key: typing.Any,  # type: ignore
        default: None | typing.Any = None,  # type: ignore
    ):
        ...
    




    
    def __getitem__(
        self,
        key: typing.Any,  # type: ignore
    ) -> typing.Any:  # type: ignore
        return super().__getitem__(key)

    
    def __contains__(
        self,
        key: typing.Any,  # type: ignore
    ) -> bool:
        return super().__contains__(key)

    
    def __delitem__(
        self,
        key: typing.Any,  # type: ignore
    ):
        super().__delitem__(key)

    
    def __setitem__(
        self,
        key: typing.Any,  # type: ignore
        item: typing.Any,  # type: ignore
    ):
        super().__setitem__(key, item)

    
    def get(
        self,
        key: typing.Any,  # type: ignore
        default: None | typing.Any = None,  # type: ignore
    ) -> None | typing.Any:  # type: ignore
        return super().get(key, default)

    
    def pop(
        self,
        key: typing.Any,  # type: ignore
        default: None | typing.Any = None,  # type: ignore
    ) -> None | typing.Any:  # type: ignore
        return super().pop(key, default)

    
    def setdefault(
        self,
        key: typing.Any,  # type: ignore
        default: None | typing.Any = None,  # type: ignore
    ):
        return super().setdefault(key, default)
    

# @formatter: on
# NOLINTEND
